//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Globals"",
            ""id"": ""920c043d-8725-4093-a8a8-c7be3288145f"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""d79aab93-93ee-4984-9d41-d306f16622dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4df28123-0089-4ac4-94e2-190485e21494"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CardSelection"",
            ""id"": ""c3f5bc63-f279-4407-a278-44a1fc0456c0"",
            ""actions"": [
                {
                    ""name"": ""DragCard"",
                    ""type"": ""Button"",
                    ""id"": ""3057098c-f504-4d09-97c9-a388801d4578"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2e026581-513e-4137-8574-32a9e78c1484"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LootSelection"",
            ""id"": ""e3e096c6-a33f-4a58-867c-a309a17b54e1"",
            ""actions"": [
                {
                    ""name"": ""Choose"",
                    ""type"": ""Button"",
                    ""id"": ""136cd9c5-6b5e-4b8a-bdf6-c3a94b7f743d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aebdcc0d-1fe9-4de6-94d9-0c14a16d9ddb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterSelection"",
            ""id"": ""9cdbb076-3ab7-42ac-8538-713d6eeef507"",
            ""actions"": [
                {
                    ""name"": ""Choose"",
                    ""type"": ""Button"",
                    ""id"": ""bffc3828-c9ee-4ecf-ab6f-e4acc5adf4fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fb6d8af8-b632-40ed-bd16-1281f83164e6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Globals
        m_Globals = asset.FindActionMap("Globals", throwIfNotFound: true);
        m_Globals_MousePosition = m_Globals.FindAction("MousePosition", throwIfNotFound: true);
        // CardSelection
        m_CardSelection = asset.FindActionMap("CardSelection", throwIfNotFound: true);
        m_CardSelection_DragCard = m_CardSelection.FindAction("DragCard", throwIfNotFound: true);
        // LootSelection
        m_LootSelection = asset.FindActionMap("LootSelection", throwIfNotFound: true);
        m_LootSelection_Choose = m_LootSelection.FindAction("Choose", throwIfNotFound: true);
        // CharacterSelection
        m_CharacterSelection = asset.FindActionMap("CharacterSelection", throwIfNotFound: true);
        m_CharacterSelection_Choose = m_CharacterSelection.FindAction("Choose", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Globals
    private readonly InputActionMap m_Globals;
    private IGlobalsActions m_GlobalsActionsCallbackInterface;
    private readonly InputAction m_Globals_MousePosition;
    public struct GlobalsActions
    {
        private @InputActions m_Wrapper;
        public GlobalsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Globals_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Globals; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalsActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalsActions instance)
        {
            if (m_Wrapper.m_GlobalsActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_GlobalsActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_GlobalsActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_GlobalsActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_GlobalsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public GlobalsActions @Globals => new GlobalsActions(this);

    // CardSelection
    private readonly InputActionMap m_CardSelection;
    private ICardSelectionActions m_CardSelectionActionsCallbackInterface;
    private readonly InputAction m_CardSelection_DragCard;
    public struct CardSelectionActions
    {
        private @InputActions m_Wrapper;
        public CardSelectionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragCard => m_Wrapper.m_CardSelection_DragCard;
        public InputActionMap Get() { return m_Wrapper.m_CardSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CardSelectionActions set) { return set.Get(); }
        public void SetCallbacks(ICardSelectionActions instance)
        {
            if (m_Wrapper.m_CardSelectionActionsCallbackInterface != null)
            {
                @DragCard.started -= m_Wrapper.m_CardSelectionActionsCallbackInterface.OnDragCard;
                @DragCard.performed -= m_Wrapper.m_CardSelectionActionsCallbackInterface.OnDragCard;
                @DragCard.canceled -= m_Wrapper.m_CardSelectionActionsCallbackInterface.OnDragCard;
            }
            m_Wrapper.m_CardSelectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DragCard.started += instance.OnDragCard;
                @DragCard.performed += instance.OnDragCard;
                @DragCard.canceled += instance.OnDragCard;
            }
        }
    }
    public CardSelectionActions @CardSelection => new CardSelectionActions(this);

    // LootSelection
    private readonly InputActionMap m_LootSelection;
    private ILootSelectionActions m_LootSelectionActionsCallbackInterface;
    private readonly InputAction m_LootSelection_Choose;
    public struct LootSelectionActions
    {
        private @InputActions m_Wrapper;
        public LootSelectionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Choose => m_Wrapper.m_LootSelection_Choose;
        public InputActionMap Get() { return m_Wrapper.m_LootSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LootSelectionActions set) { return set.Get(); }
        public void SetCallbacks(ILootSelectionActions instance)
        {
            if (m_Wrapper.m_LootSelectionActionsCallbackInterface != null)
            {
                @Choose.started -= m_Wrapper.m_LootSelectionActionsCallbackInterface.OnChoose;
                @Choose.performed -= m_Wrapper.m_LootSelectionActionsCallbackInterface.OnChoose;
                @Choose.canceled -= m_Wrapper.m_LootSelectionActionsCallbackInterface.OnChoose;
            }
            m_Wrapper.m_LootSelectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Choose.started += instance.OnChoose;
                @Choose.performed += instance.OnChoose;
                @Choose.canceled += instance.OnChoose;
            }
        }
    }
    public LootSelectionActions @LootSelection => new LootSelectionActions(this);

    // CharacterSelection
    private readonly InputActionMap m_CharacterSelection;
    private ICharacterSelectionActions m_CharacterSelectionActionsCallbackInterface;
    private readonly InputAction m_CharacterSelection_Choose;
    public struct CharacterSelectionActions
    {
        private @InputActions m_Wrapper;
        public CharacterSelectionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Choose => m_Wrapper.m_CharacterSelection_Choose;
        public InputActionMap Get() { return m_Wrapper.m_CharacterSelection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterSelectionActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterSelectionActions instance)
        {
            if (m_Wrapper.m_CharacterSelectionActionsCallbackInterface != null)
            {
                @Choose.started -= m_Wrapper.m_CharacterSelectionActionsCallbackInterface.OnChoose;
                @Choose.performed -= m_Wrapper.m_CharacterSelectionActionsCallbackInterface.OnChoose;
                @Choose.canceled -= m_Wrapper.m_CharacterSelectionActionsCallbackInterface.OnChoose;
            }
            m_Wrapper.m_CharacterSelectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Choose.started += instance.OnChoose;
                @Choose.performed += instance.OnChoose;
                @Choose.canceled += instance.OnChoose;
            }
        }
    }
    public CharacterSelectionActions @CharacterSelection => new CharacterSelectionActions(this);
    public interface IGlobalsActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface ICardSelectionActions
    {
        void OnDragCard(InputAction.CallbackContext context);
    }
    public interface ILootSelectionActions
    {
        void OnChoose(InputAction.CallbackContext context);
    }
    public interface ICharacterSelectionActions
    {
        void OnChoose(InputAction.CallbackContext context);
    }
}
